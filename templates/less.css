// iCheckMovies icon font
@icm-icon-font-path:       "../fonts/";
@icm-icon-font-name:       "<%= fontBaseName %>";
@icm-icon-font-svg-id:     "<%= fontBaseName %>";

@font-face {
    font-family: '<%= fontBaseName %>';
    src: ~"url('@{icm-icon-font-path}@{icm-icon-font-name}.eot')";
    src: ~"url('@{icm-icon-font-path}@{icm-icon-font-name}.eot?#iefix') format('embedded-opentype')",
    ~"url('@{icm-icon-font-path}@{icm-icon-font-name}.woff') format('woff')",
    ~"url('@{icm-icon-font-path}@{icm-icon-font-name}.ttf') format('truetype')",
    ~"url('@{icm-icon-font-path}@{icm-icon-font-name}.svg#@{icm-icon-font-svg-id}') format('svg')";
}

.<%= baseClass %> {
    position: relative;
    top: 1px;
    display: inline-block;
    font-family: '<%= fontBaseName %>';
    font-style: normal;
    font-weight: normal;
    line-height: 1;
    speak: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
<%
var padString = function(stringToBePadded, paddingCharacter, paddingLength){
    var stringLength = stringToBePadded.length;
    var pad = stringLength < paddingLength ? paddingLength - stringLength : 0;
    var paddingWithoutString = new Array(paddingLength + 1).join(paddingCharacter);
    return stringToBePadded + paddingWithoutString.substr(0, pad);
};
%><% if (iconsStyles) { %><% for (var glyphIdx = 0; glyphIdx < glyphs.length; glyphIdx++) { var className = '.' + classPrefix + glyphs[glyphIdx]; %><% if (stylesheet === 'less') { %>
<%= padString(className, ' ', 40) %> { &:before { content:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>"; } }<% } } } %>